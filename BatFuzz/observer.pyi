from typing import TYPE_CHECKING, Optional
from abc import ABC, abstractmethod

if TYPE_CHECKING:
    from .tui import BatFuzz

class Observer(ABC):
    def __init__(self) -> None: ...

    @abstractmethod
    def update(self, event: str, data: dict) -> None: ...

class TUIObserver(Observer):
    def __init__(self, app: 'BatFuzz') -> None: ...

    def update(self, event: str, data: dict) -> None: ...

class LoggingObserver(Observer):
    def __init__(self, func_name: str, log_path: Optional[str] = None): ...

    def create_log_file(self, func_name: str) -> str: ...

    def prepare_log_file(self, file_name: str, func_name: str) -> None: ...

    def update(self, event: str, data: dict) -> None: ...
